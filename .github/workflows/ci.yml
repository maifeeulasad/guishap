name: Guishap CI

# Trigger the workflow on:
# - All pushes to any branch
# - All pull requests (from any branch to any branch)
# - All releases (published, created, edited, etc.)
# - Manual workflow dispatch
on:
  push:
    branches: ['**']  # All branches including main, develop, feature/*, etc.
  pull_request:
    branches: ['**']  # PRs targeting any branch
    types: [opened, synchronize, reopened, ready_for_review]
  release:
    types: [published, created, edited, prereleased]
  workflow_dispatch:  # Manual trigger
    inputs:
      debug_enabled:
        description: 'Enable debugging'
        required: false
        default: false
        type: boolean

# Set default permissions
permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  # Job 1: Build and Test on Ubuntu (Primary)
  build-and-test-ubuntu:
    name: 'Build & Test (Ubuntu)'
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        gcc-version: [9, 10, 11, 12]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better context
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          flex \
          bison \
          gcc-${{ matrix.gcc-version }} \
          g++-${{ matrix.gcc-version }} \
          make \
          wabt \
          build-essential \
          locales
        
        # Set up UTF-8 locale for Bengali support
        sudo locale-gen bn_BD.UTF-8
        sudo update-locale
        
        # Set gcc version
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc-version }} 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.gcc-version }} 100
    
    - name: Verify tools installation
      run: |
        echo "=== Tool Versions ==="
        flex --version
        bison --version
        gcc --version
        g++ --version
        make --version
        wat2wasm --version || echo "wat2wasm not found, will install from wabt"
        echo "====================="
        
        # Verify UTF-8 locale
        locale | grep -i utf || echo "UTF-8 locale setup may need attention"
    
    - name: Clean workspace
      run: make clean || true
    
    - name: Build Guishap compiler
      run: |
        echo "🏗️  Building Guishap compiler..."
        make all
        ls -la guishap.out
        echo "✅ Build completed successfully"
    
    - name: Run complete test suite
      run: |
        echo "🧪 Running complete test suite..."
        make test
        echo "✅ All tests passed"
    
    - name: Test WebAssembly generation
      run: |
        echo "🚀 Testing WebAssembly generation..."
        make wasm
        ls -la *.wat *.wasm
        echo "✅ WebAssembly tests passed"
    
    - name: Run CI validation
      run: |
        echo "🔍 Running comprehensive CI validation..."
        if [ -f ci.sh ]; then
          chmod +x ci.sh
          ./ci.sh
        else
          echo "ci.sh not found, running basic validation..."
          make test
          make wasm
        fi
        echo "✅ CI validation completed"
    
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-ubuntu-gcc${{ matrix.gcc-version }}
        path: |
          test/
          tests/
          *.wat
          *.wasm
          *.log
          *.out
        retention-days: 7

  # Job 2: Build and Test on macOS
  build-and-test-macos:
    name: 'Build & Test (macOS)'
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew update
        brew install flex bison gcc make wabt
        
        # Add brew's flex and bison to PATH (macOS has older versions by default)
        echo "/usr/local/opt/flex/bin:/usr/local/opt/bison/bin" >> $GITHUB_PATH
    
    - name: Verify tools installation
      run: |
        echo "=== Tool Versions (macOS) ==="
        flex --version
        bison --version
        gcc --version
        make --version
        wat2wasm --version
        echo "=========================="
    
    - name: Clean and build
      run: |
        make clean || true
        make all
    
    - name: Run tests
      run: |
        make test
        make wasm
    
    - name: Upload macOS artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-macos
        path: |
          test/
          tests/
          *.wat
          *.wasm
          *.out
        retention-days: 7

  # Job 3: Code Quality and Analysis
  code-quality:
    name: 'Code Quality Analysis'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y flex bison gcc g++ make cppcheck clang-format
    
    - name: Run static analysis
      run: |
        echo "🔍 Running static analysis..."
        
        # Run cppcheck on C source files
        find . -name "*.c" -o -name "*.h" | xargs cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem || echo "Static analysis completed with warnings"
        
        echo "✅ Static analysis completed"
    
    - name: Check code formatting
      run: |
        echo "📝 Checking code formatting..."
        
        # Check if code follows consistent formatting
        find . -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || echo "Code formatting could be improved"
        
        echo "✅ Formatting check completed"
    
    - name: Verify documentation
      run: |
        echo "📚 Verifying documentation..."
        
        # Check if important files exist
        test -f README.md || (echo "❌ README.md missing" && exit 1)
        test -f LICENSE || (echo "❌ LICENSE missing" && exit 1)
        test -f DEVELOPMENT.md || (echo "❌ DEVELOPMENT.md missing" && exit 1)
        
        # Check if README has basic content
        grep -i "guishap" README.md > /dev/null || (echo "❌ README.md should mention Guishap" && exit 1)
        
        echo "✅ Documentation check completed"

  # Job 4: Security and Dependencies
  # security-check:
  #   name: 'Security Analysis'
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
    
  #   - name: Run security scan
  #     uses: github/super-linter@v4
  #     env:
  #       DEFAULT_BRANCH: main
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       VALIDATE_ALL_CODEBASE: true
  #       VALIDATE_C: true
  #       VALIDATE_CPP: true
  #       VALIDATE_MARKDOWN: true
  #       VALIDATE_YAML: true
  #       FILTER_REGEX_EXCLUDE: '.*\.(tab\.c|tab\.h|yy\.c)$'
  #       LOG_LEVEL: DEBUG

  # Job 5: Performance and Memory Tests
  performance-test:
    name: 'Performance & Memory Tests'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies and tools
      run: |
        sudo apt-get update
        sudo apt-get install -y flex bison gcc g++ make wabt valgrind time
    
    - name: Build with debug info
      run: |
        make clean
        CFLAGS="-g -O0" make all
    
    - name: Run memory leak tests
      run: |
        echo "🔍 Running memory leak detection..."
        
        # Test with valgrind on simple cases
        for test_dir in test/*/; do
          if [ -f "$test_dir/input.mgs" ]; then
            echo "Testing memory leaks for: $(basename "$test_dir")"
            valgrind --leak-check=full --error-exitcode=1 --track-origins=yes \
              ./guishap.out "$test_dir/input.mgs" > /dev/null 2>&1 || echo "Memory issues detected in $(basename "$test_dir")"
          fi
        done
        
        # Also check tests/ directory if it exists
        for test_dir in tests/*/; do
          if [ -f "$test_dir/input.mgs" ]; then
            echo "Testing memory leaks for: $(basename "$test_dir")"
            valgrind --leak-check=full --error-exitcode=1 --track-origins=yes \
              ./guishap.out "$test_dir/input.mgs" > /dev/null 2>&1 || echo "Memory issues detected in $(basename "$test_dir")"
          fi
        done
        
        echo "✅ Memory tests completed"
    
    - name: Performance benchmarks
      run: |
        echo "⚡ Running performance benchmarks..."
        
        # Time compilation of larger test files
        for test_dir in test/*/; do
          if [ -f "$test_dir/input.mgs" ]; then
            echo "Timing: $(basename "$test_dir")"
            /usr/bin/time -f "Real: %es, User: %Us, Sys: %Ss, Memory: %MKB" \
              ./guishap.out "$test_dir/input.mgs" > /dev/null
          fi
        done
        
        # Also check tests/ directory if it exists  
        for test_dir in tests/*/; do
          if [ -f "$test_dir/input.mgs" ]; then
            echo "Timing: $(basename "$test_dir")"
            /usr/bin/time -f "Real: %es, User: %Us, Sys: %Ss, Memory: %MKB" \
              ./guishap.out "$test_dir/input.mgs" > /dev/null
          fi
        done
        
        echo "✅ Performance tests completed"

  # Job 6: Release validation (only on release events)
  release-validation:
    name: 'Release Validation'
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y flex bison gcc g++ make wabt
    
    - name: Build release version
      run: |
        make clean
        CFLAGS="-O2 -DNDEBUG" make all
    
    - name: Run comprehensive tests
      run: |
        make test
        make wasm
        if [ -f ci.sh ]; then
          chmod +x ci.sh
          ./ci.sh
        fi
    
    - name: Create release artifacts
      run: |
        mkdir -p release-artifacts
        cp guishap.out release-artifacts/
        cp *.wat release-artifacts/ 2>/dev/null || true
        cp *.wasm release-artifacts/ 2>/dev/null || true
        tar -czf guishap-${{ github.ref_name }}.tar.gz release-artifacts/
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: guishap-release-${{ github.ref_name }}
        path: guishap-${{ github.ref_name }}.tar.gz

  # Summary job - only runs after all others complete
  ci-summary:
    name: 'CI Summary'
    runs-on: ubuntu-latest
    needs: [build-and-test-ubuntu, build-and-test-macos, code-quality, performance-test]
    # needs: [build-and-test-ubuntu, build-and-test-macos, code-quality, security-check, performance-test]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "=== CI SUMMARY ==="
        echo "Ubuntu Build & Test: ${{ needs.build-and-test-ubuntu.result }}"
        echo "macOS Build & Test: ${{ needs.build-and-test-macos.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        # echo "Security Check: ${{ needs.security-check.result }}"
        echo "Performance Test: ${{ needs.performance-test.result }}"
        echo "=================="
        
        # Fail if any critical job failed
        if [[ "${{ needs.build-and-test-ubuntu.result }}" == "failure" ]]; then
          echo "❌ Critical: Ubuntu build failed"
          exit 1
        fi
        
        if [[ "${{ needs.build-and-test-macos.result }}" == "failure" ]]; then
          echo "⚠️  Warning: macOS build failed"
        fi
        
        echo "✅ CI Summary completed"
    
    - name: Post status to PR (if applicable)
      if: github.event_name == 'pull_request'
      run: |
        echo "This is a Pull Request - results summary would be posted here"
        echo "All critical checks: ${{ needs.build-and-test-ubuntu.result }}"

# Environment variables for all jobs
env:
  LANG: en_US.UTF-8
  LC_ALL: en_US.UTF-8
  DEBIAN_FRONTEND: noninteractive
